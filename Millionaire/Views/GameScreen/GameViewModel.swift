//
//  GameViewModel.swift
//  Millionaire
//
//  Created by –ö–µ–ª–ª–µ—Ä –î–º–∏—Ç—Ä–∏–π on 22.07.2025.
//

import Foundation
import Combine

// MARK: - Navigation States
extension GameViewModel {
    enum GameNavigationState: Hashable, Equatable {
        case playing
        case showingResult
        case scoreboard(session: GameSession, mode: ScoreboardMode)
    }
    
    enum ScoreboardMode: Hashable, Equatable {
        case intermediate
        case victory
        case gameOver
    }
}

// –ª–æ–∫–∞–ª—å–Ω–æ–µ UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
final class GameViewModel: ObservableObject {
    
    // MARK: - Services
    let timerService: ITimerService
    let audioService: IAudioService
    
    private var cancellables = Set<AnyCancellable>()
    private let prizeCalculator = PrizeCalculator()
    
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    private let onSessionUpdated: (GameSession) -> Void
    
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã (–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω)
     private let onGameFinished: (() -> Void)?
    
    @Published private var session: GameSession {
        didSet {
            // –°–æ–æ–±—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
            onSessionUpdated(session)
        }
    }
    
    /// –ú–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @Published private(set) var answers: [String] {
        didSet {
            // –û—á–∏—â–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –æ—Ç–≤–µ—Ç–æ–≤ (–∞ –∑–Ω–∞—á–∏—Ç –∏ –≤–æ–ø—Ä–æ—Å–∞)
            disabledAnswers = []
        }
    }
    
    /// –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    @Published private(set) var disabledAnswers: Set<String> = []
    
    @Published var duration: String = "00:00"
    
    // –î–æ–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è UI
    @Published var correctAnswer: String?
    @Published var selectedAnswer: String?
    @Published var answerResultState: AnswerResult?
    
    @Published var shouldShowGameOver = false
    @Published var shouldShowVictory = false

    @Published var navigationPath: [GameNavigationState] = [] {
        didSet {
            print("üìç NavigationPath changed: \(navigationPath)")
            print("üîç shouldShowScoreboard: \(shouldShowScoreboard)")
        }
    }
    
    // –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
    private var answerProcessingTask: Task<Void, Never>?
    
    // –í–∞–∂–Ω–æ: –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–∏ –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    deinit {
        answerProcessingTask?.cancel()
    }
    
    var question: Question { session.currentQuestion }
    
    var numberQuestion: Int { session.currentQuestionIndex + 1 }
    
    var priceQuestion: String {
        prizeCalculator
            .getPrizeAmount(for: session.currentQuestionIndex)
            .formatted()
    }
    
    var lifelines: Set<Lifeline> { session.lifelines }
    
    //    MARK: Init
    init(
        initialSession: GameSession,
        onSessionUpdated: @escaping (GameSession) -> Void = { _ in },
        onGameFinished: (() -> Void)? = nil,
        audioService: IAudioService = AudioService(),
        timerService: ITimerService = TimerService()
    ) {
        self.session = initialSession
        self.onSessionUpdated = onSessionUpdated
        self.audioService = audioService
        self.timerService = timerService
        self.onGameFinished = onGameFinished
        
        answers = initialSession.currentQuestion.allAnswers.shuffled()
        
        bindTimer()
    }
    
    // MARK: - Game Start
    func startGame() {
        audioService.playGameSfx()
        
        timerService.start30SecondTimer { [weak self] in
            self?.onTimeExpired()
        }
    }
    
    private func onTimeExpired() {
        audioService.playAnswerLockedSfx()
        stopGameResources()
        
        //  –í—Ä–µ–º—è –≤—ã—à–ª–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ—Ä–±–æ—Ä–¥ –∫–∞–∫ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        checkGameEnd()
    }
    
    private func stopGameResources() {
        audioService.stop()
        timerService.stopTimer()
    }
    
    // MARK: - Timer Binding
    private func bindTimer() {
        timerService.progressPublisher
            .map { progress in
                let totalSeconds: Int = 30
                let elapsed = Int(Float(totalSeconds) * progress)
                let remaining = max(0, totalSeconds - elapsed)
                let minutes = remaining / 60
                let seconds = remaining % 60
                return String(format: "%02d:%02d", minutes, seconds)
            }
            .receive(on: DispatchQueue.main)
            .assign(to: &$duration)
    }
    
    // MARK: - Answer Tap
    func onAnswer(_ answer: String) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
//           guard !isProcessingAnswer else { return }
        
            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            answerProcessingTask?.cancel() // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–∞–ª –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç

       
//        –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        selectedAnswer = answer
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é
        answerProcessingTask = Task {
            await processAnswerWithDelay(answer: answer)
        }
    }
    
    @MainActor
    private func processAnswerWithDelay(answer: String) async {
        
        //   C—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É —Ç–∞–π–º–µ—Ä
        timerService.pauseTimer()
        
        // –ò–≥—Ä–∞–µ–º –∑–≤—É–∫ –∏–Ω—Ç—Ä–∏–≥–∏
        audioService.playAnswerLockedSfx()
        
        do {
            // –ñ–¥–µ–º –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞
            try await Task.sleep(for: .seconds(3))
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            try Task.checkCancellation()
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            await processAnswer(answer)
            
        } catch {
            // –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            audioService.stop()
        }
    }
    
    @MainActor
    private func processAnswer(_ answer: String) async {
        var newSession = session
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        selectedAnswer = answer
        correctAnswer = newSession.currentQuestion.correctAnswer
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç ‚Äî –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º —Ç—É—Ç –Ω–∏—á–µ–≥–æ
        guard let answerResult = newSession.answer(answer: answer) else {
            return
        }

        // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑—ã –∏—Å–ø–æ–¥–±–∑—É—è PrizeCalculator
        switch answerResult {
        case .correct:
            let prize = prizeCalculator.getPrizeAmount(for: session.currentQuestionIndex)
            newSession.addScore(prize)
        case .incorrect:
            let checkpoint = prizeCalculator.getCheckpointPrizeAmount(before: session.currentQuestionIndex)
            newSession.setScore(checkpoint)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        //session = newSession

        // –ó–≤—É–∫
        switch answerResult {
        case .correct:
            answerResultState = .correct
            audioService.playCorrectAnswerSfx()
        case .incorrect:
            answerResultState = .incorrect
            audioService.playWrongAnswerSfx()
        }

        // –ñ–¥—ë–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        do {
            try await Task.sleep(for: .seconds(2))
            try Task.checkCancellation()

            if answerResult == .correct && !session.isFinished {
                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                selectedAnswer = nil  // <-- –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—é–¥–∞
                answers = session.currentQuestion.allAnswers.shuffled()
                startGame()
            } else {
                // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                checkGameEnd()
            }

        } catch {
            // –û—Ç–º–µ–Ω–µ–Ω–æ
            audioService.stop()
        }
    }
    
    private func checkGameEnd() {
        let targetState: GameNavigationState
        
        if session.isFinished {
            if session.currentQuestionIndex == 14 {
                print(" –ü–û–ë–ï–î–ê! –í—ã–∏–≥—Ä–∞–Ω –º–∏–ª–ª–∏–æ–Ω!")
                targetState = .scoreboard(session: session, mode: .victory)
            } else {
                print(" –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å–µ \(session.currentQuestionIndex + 1)")
                print(" –í—ã–∏–≥—Ä—ã—à: \(session.score) ")
                targetState = .scoreboard(session: session, mode: .gameOver)
            }
        } else {
            targetState = .scoreboard(session: session, mode: .intermediate)
        }
        
        print("üöÄ Adding to navigationPath: \(targetState)")
        navigationPath.append(targetState)
        print("üìç NavigationPath after append: \(navigationPath)")
    }
    
    // MARK: - Help Button Actions
    func fiftyFiftyButtonTap() {
        guard let result = session.useFiftyFiftyLifeline() else {
            // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
            return
        }
        
        // –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫ –≤—ã–±–æ—Ä—É
        disabledAnswers = result.disabledAnswers
    }
    
    func audienceButtonTap() {
        guard let result = session.useAudienceLifeline() else {
            // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
            return
        }
        print(result)
        // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    }
    
    func callYourFriendButtonTap() {
        guard let result = session.useCallToFriendLifeline() else {
            // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
            return
        }
        print(result)
        // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    }
    
    func handleScoreboardDismiss() {
        // –û—á–∏—â–∞–µ–º –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigationPath.removeAll()
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        selectedAnswer = nil
        correctAnswer = nil
        answerResultState = nil
        
        if !session.isFinished {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            answers = session.currentQuestion.allAnswers.shuffled()
            startGame()
        } else {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            // –≠—Ç–æ—Ç callback –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–∑ HomeViewModel
            onGameFinished?()
        }
    }

    
    var shouldShowScoreboard: Bool {
        !navigationPath.isEmpty && navigationPath.contains { state in
            if case .scoreboard = state { return true }
            return false
        }
    }

    var currentScoreboardState: GameNavigationState? {
        navigationPath.first { state in
            if case .scoreboard = state { return true }
            return false
        }
    }

    func dismissScoreboard() {
        navigationPath.removeAll()
        handleScoreboardDismiss()
    }
    
    func testScoreboard() {
        navigationPath.append(.scoreboard(session: session, mode: .gameOver))
    }
}

private extension Question {
    var allAnswers: [String] {
        [correctAnswer] + incorrectAnswers
    }
}

